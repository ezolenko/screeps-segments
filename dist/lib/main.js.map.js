module.exports.d={"version":3,"file":"lib.js","sources":["../../src/runtime.tracker.ts","../../src/segments.visualizer.ts","../../src/segments.logger.ts","../../src/segments.basic.wrapper.ts","../../src/segments.buffer.ts","../../src/segments.storage.ts"],"sourcesContent":["import { IMemoryRoot } from \"./memory.root\";\r\n\r\nexport interface IRuntimeNode\r\n{\r\n\treuse: number;\r\n\ttotalReuse: number;\r\n\tlastSeen: number;\r\n}\r\n\r\nexport interface IRuntimeTrackerMemory\r\n{\r\n\tlastNode?: string;\r\n\tnodes:\r\n\t{\r\n\t\t[node: string]: IRuntimeNode;\r\n\t};\r\n}\r\n\r\ndeclare global\r\n{\r\n\tinterface Memory\r\n\t{\r\n\t\truntimes: IRuntimeTrackerMemory;\r\n\t}\r\n}\r\n\r\nconst root: IMemoryRoot<IRuntimeTrackerMemory> =\r\n{\r\n\tget memory(): IRuntimeTrackerMemory { return Memory.runtimes; },\r\n\tset memory(value: IRuntimeTrackerMemory) { Memory.runtimes = value; },\r\n\tpath: \"Memory.runtimes\",\r\n};\r\n\r\nconst currentNodeId = String(Game.time);\r\n\r\nexport class RuntimeTracker\r\n{\r\n\tpublic get isLoadTick() { return root.memory.nodes[this.currentNodeId].totalReuse === 1; }\r\n\tpublic get currentNodeId() { return currentNodeId; }\r\n\tpublic get switchedNodes() { return root.memory.lastNode !== this.currentNodeId; }\r\n\tpublic isActive(nodeId: string) { return _.has(this._activeNodes, nodeId); }\r\n\r\n\tprivate _activeNodes: { [id: string]: IRuntimeNode } = {};\r\n\tpublic get activeNodes(): { [id: string]: IRuntimeNode } { return this._activeNodes; }\r\n\r\n\tprivate get memory() { return root.memory; }\r\n\r\n\tpublic beforeTick()\r\n\t{\r\n\t\t// first tick ever\r\n\t\tif (root.memory === undefined)\r\n\t\t{\r\n\t\t\troot.memory =\r\n\t\t\t{\r\n\t\t\t\tnodes:\r\n\t\t\t\t{\r\n\t\t\t\t\t[this.currentNodeId]:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treuse: 1,\r\n\t\t\t\t\t\ttotalReuse: 1,\r\n\t\t\t\t\t\tlastSeen: Game.time,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// first tick on this node\r\n\t\t\tif (root.memory.nodes[this.currentNodeId] === undefined)\r\n\t\t\t{\r\n\t\t\t\troot.memory.nodes[this.currentNodeId] =\r\n\t\t\t\t{\r\n\t\t\t\t\treuse: 1,\r\n\t\t\t\t\ttotalReuse: 1,\r\n\t\t\t\t\tlastSeen: Game.time,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse // seen this before\r\n\t\t\t{\r\n\t\t\t\tconst node = root.memory.nodes[this.currentNodeId];\r\n\t\t\t\tnode.lastSeen = Game.time;\r\n\t\t\t\tnode.totalReuse += 1;\r\n\t\t\t\tnode.reuse += 1;\r\n\t\t\t}\r\n\r\n\t\t\t_.each(root.memory.nodes, (node, key) =>\r\n\t\t\t{\r\n\t\t\t\tif (key === undefined || key === this.currentNodeId)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tnode.reuse = 0;\r\n\t\t\t\tif (Game.time - node.lastSeen > 100)\r\n\t\t\t\t\tdelete root.memory.nodes[key];\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis._activeNodes = this.getActiveNodes();\r\n\t}\r\n\r\n\tprivate getActiveNodes(): { [id: string]: IRuntimeNode }\r\n\t{\r\n\t\tconst nodes: Array<{ id: string, node: IRuntimeNode, diff: number, p: number }> = _\r\n\t\t\t.map(root.memory.nodes, (node, id) =>\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: id!,\r\n\t\t\t\t\tnode,\r\n\t\t\t\t\tdiff: 0,\r\n\t\t\t\t\tp: Game.time - node.lastSeen + node.totalReuse,\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.sort((e) => e.p);\r\n\t\tif (nodes.length === 0)\r\n\t\t\treturn {};\r\n\t\tfor (let i = 1; i < nodes.length; ++i)\r\n\t\t\tnodes[i].diff = nodes[i].p / nodes[i - 1].p;\r\n\t\treturn nodes.slice(0, _.findIndex(nodes, (e) => e.diff > 2)).map((e) => ({ [e.id]: e.node })).reduce(_.merge, {});\r\n\t}\r\n\r\n\tpublic report(): string\r\n\t{\r\n\t\tconst active = this.getActiveNodes();\r\n\r\n\t\treturn `T: ${Game.time}, last id: ${root.memory.lastNode}, ${this.switchedNodes ? \"switched\" : \"same node\"}\\n\\t` + _.map(root.memory.nodes, (node, key) =>\r\n\t\t{\r\n\t\t\treturn `${key === this.currentNodeId ? \"N\" : \"n\"}${_.has(active, key!) ? \"A\" : \"i\"}[id: ${key}, t: ${node.totalReuse}, run: ${node.reuse}, lr: ${Game.time - node.lastSeen}]`;\r\n\t\t}).join(\"\\n\\t\");\r\n\t}\r\n\r\n\tpublic afterTick()\r\n\t{\r\n\t\troot.memory.lastNode = this.currentNodeId;\r\n\t}\r\n}\r\n\r\nexport const tracker = new RuntimeTracker();\r\n","export interface IBox\r\n{\r\n\tx: () => number;\r\n\ty: () => number;\r\n\tw: () => number;\r\n\th: () => number;\r\n}\r\n\r\nexport interface ICell\r\n{\r\n\tdraw(visual: RoomVisual): ICell;\r\n\tbox: IBox;\r\n}\r\n\r\nexport class Circle implements ICell\r\n{\r\n\tpublic box: IBox;\r\n\r\n\tconstructor(private style: CircleStyle) { }\r\n\r\n\tpublic draw(visual: RoomVisual)\r\n\t{\r\n\t\tconst radius = Math.min(this.box.w() / 2, this.box.h() / 2);\r\n\t\tthis.style.radius = radius;\r\n\t\tvisual.circle(this.box.x() + this.box.w() / 2, this.box.y() + this.box.h() / 2, this.style);\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nexport class Rect implements ICell\r\n{\r\n\tpublic box: IBox;\r\n\r\n\tconstructor(private style: PolyStyle) { }\r\n\r\n\tpublic draw(visual: RoomVisual)\r\n\t{\r\n\t\tvisual.rect(this.box.x(), this.box.y(), this.box.w(), this.box.h(), this.style);\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nexport class Text implements ICell\r\n{\r\n\tpublic box: IBox;\r\n\r\n\tconstructor(private text: string, private style: TextStyle) { }\r\n\r\n\tpublic draw(visual: RoomVisual)\r\n\t{\r\n\t\tvisual.text(this.text, this.box.x() + this.box.w() / 2, this.box.y() + this.box.h() / 2, this.style);\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nexport class Grid implements ICell\r\n{\r\n\tprivate _box: IBox;\r\n\r\n\tpublic get box() { return this._box; }\r\n\tpublic set box(value: IBox)\r\n\t{\r\n\t\tthis._box = value;\r\n\t\tthis.cellWidth = _.memoize(() => this._box.w() / this.opts.columns);\r\n\t\tthis.cellHeight = _.memoize(() => this._box.h() / this.opts.rows);\r\n\t}\r\n\r\n\tprivate cells: { [column: string]: { [row: string]: ICell } } = {};\r\n\tprivate cellWidth: () => number = () => 1;\r\n\tprivate cellHeight: () => number = () => 1;\r\n\r\n\tpublic get rows() { return this.opts.rows; }\r\n\tpublic get columns() { return this.opts.columns; }\r\n\tpublic get maxCells() { return this.opts.rows * this.opts.columns; }\r\n\r\n\tconstructor(private readonly opts: { columns: number, rows: number, backgroundStyle?: PolyStyle }) { }\r\n\r\n\tprivate convert(index: number): { column: number, row: number }\r\n\t{\r\n\t\tconst column = index % this.opts.columns;\r\n\t\tconst row = Math.floor(index / this.opts.columns);\r\n\r\n\t\treturn { column, row };\r\n\t}\r\n\r\n\tpublic setCellByIndex(index: number, cell: ICell)\r\n\t{\r\n\t\treturn this.setCell(this.convert(index), cell);\r\n\t}\r\n\r\n\tpublic setCell(pos: { column: number, row: number }, cell: ICell)\r\n\t{\r\n\t\tif (this.cells[pos.column] === undefined)\r\n\t\t\tthis.cells[pos.column] = {};\r\n\r\n\t\tthis.cells[pos.column][pos.row] = cell;\r\n\r\n\t\tcell.box =\r\n\t\t{\r\n\t\t\tx: _.memoize(() => this.box.x() + pos.column * this.cellWidth()),\r\n\t\t\ty: _.memoize(() => this.box.y() + pos.row * this.cellHeight()),\r\n\t\t\th: () => this.cellHeight(),\r\n\t\t\tw: () => this.cellWidth(),\r\n\t\t};\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic getCell(pos: { column: number, row: number }): ICell\r\n\t{\r\n\t\treturn _.get(this.cells, [pos.column, pos.row]);\r\n\t}\r\n\r\n\tpublic getCellByIndex(index: number)\r\n\t{\r\n\t\treturn this.getCell(this.convert(index));\r\n\t}\r\n\r\n\tpublic draw(visual: RoomVisual)\r\n\t{\r\n\t\tif (this.opts.backgroundStyle !== undefined)\r\n\t\t\tvisual.rect(this.box.x(), this.box.y(), this.box.w(), this.box.h(), this.opts.backgroundStyle);\r\n\r\n\t\t_.flatten(_.map(this.cells, (e) => _.map(e, (c) => c))).forEach((c) => c.draw(visual));\r\n\t\treturn this;\r\n\t}\r\n}\r\n","export interface ILogger\r\n{\r\n\terror(message: string): void;\r\n\tinfo(message: string): void;\r\n}\r\n\r\nclass Logger implements ILogger\r\n{\r\n\tpublic error(message: string)\r\n\t{\r\n\t\tconsole.log(message);\r\n\t}\r\n\r\n\tpublic info(message: string)\r\n\t{\r\n\t\tconsole.log(message);\r\n\t}\r\n}\r\n\r\nexport let log: ILogger = new Logger();\r\n\r\nexport function setLogger(_log: ILogger)\r\n{\r\n\tlog = _log;\r\n}\r\n","import { Grid, Text } from \"./segments.visualizer\";\r\nimport { log } from \"./segments.logger\";\r\n\r\nexport class SegmentsBasicWrapper\r\n{\r\n\tprivate readRequested: Set<number>;\r\n\tprivate willRead: Set<number>;\r\n\tprivate writeRequested: Set<number>;\r\n\tprivate willWrite: Set<number>;\r\n\tprivate read: Map<number, string>;\r\n\r\n\tpublic get maxSegments() { return 100; }\r\n\tpublic get maxMemory() { return 100 * 1024; }\r\n\tpublic get maxActive() { return 10; }\r\n\r\n\tpublic beforeTick()\r\n\t{\r\n\t\tthis.readRequested = new Set();\r\n\t\tthis.willRead = new Set();\r\n\t\tthis.writeRequested = new Set();\r\n\t\tthis.willWrite = new Set();\r\n\t\tthis.read = new Map();\r\n\r\n\t\t_.each(RawMemory.segments, (data: string, key) =>\r\n\t\t{\r\n\t\t\tconst id = this.checkId(key);\r\n\t\t\tif (id !== undefined && data !== undefined)\r\n\t\t\t{\r\n\t\t\t\tthis.read.set(id, data);\r\n\t\t\t\tdelete RawMemory.segments[id];\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic afterTick()\r\n\t{\r\n\t\tconst ids: number[] = [... this.willRead];\r\n\t\tRawMemory.setActiveSegments(ids);\r\n\r\n\t\tthis.read.clear();\r\n\t}\r\n\r\n\tprivate checkId(id: number | string | undefined): number | undefined\r\n\t{\r\n\t\tconst fixed = Number(id);\r\n\t\tif (!Number.isInteger(fixed) || fixed < 0 || fixed >= this.maxSegments)\r\n\t\t{\r\n\t\t\tlog.error(`segments: invalid id '${id}'`);\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\treturn fixed;\r\n\t}\r\n\r\n\tpublic getSegment(id: number): string | undefined\r\n\t{\r\n\t\tconst fixed = this.checkId(id);\r\n\t\treturn fixed === undefined ? undefined : this.read.get(fixed);\r\n\t}\r\n\r\n\tpublic saveSegment(id: number, data: string): boolean\r\n\t{\r\n\t\tconst fixed = this.checkId(id);\r\n\t\tif (fixed === undefined)\r\n\t\t\treturn false;\r\n\r\n\t\tthis.writeRequested.add(fixed);\r\n\r\n\t\tif (this.willWrite.size >= this.maxActive)\r\n\t\t\treturn false;\r\n\r\n\t\tif (data.length > this.maxMemory)\r\n\t\t{\r\n\t\t\tlog.error(`segments: trying to save ${data.length / 1024} Kb to segment ${fixed}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.willWrite.add(fixed);\r\n\t\tthis.read.set(fixed, data);\r\n\t\tRawMemory.segments[fixed] = data;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic deleteSegment(id: number): boolean\r\n\t{\r\n\t\tconst fixed = this.checkId(id);\r\n\t\tif (fixed === undefined)\r\n\t\t\treturn false;\r\n\r\n\t\tif (this.willWrite.delete(fixed))\r\n\t\t{\r\n\t\t\tthis.writeRequested.delete(fixed);\r\n\t\t\tdelete RawMemory.segments[fixed];\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic requestSegment(id: number): boolean\r\n\t{\r\n\t\tconst fixed = this.checkId(id);\r\n\t\tif (fixed === undefined)\r\n\t\t\treturn false;\r\n\r\n\t\tthis.readRequested.add(fixed);\r\n\r\n\t\tif (this.willRead.size >= this.maxActive)\r\n\t\t\treturn false;\r\n\r\n\t\tthis.willRead.add(fixed);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic makeGrid(cellSize = { columns: 3, rows: 2 }): Grid\r\n\t{\r\n\t\tconst states =\r\n\t\t{\r\n\t\t\treadRequested:\r\n\t\t\t{\r\n\t\t\t\tcell: () =>\tnew Text(\"r\", { color: \"blue\" }),\r\n\t\t\t\t// cell: () => new Circle({ fill: \"blue\", stroke: \"black\", strokeWidth: 0.1 }),\r\n\t\t\t\tpos: { column: 0, row: 0 },\r\n\t\t\t},\r\n\t\t\twillRead:\r\n\t\t\t{\r\n\t\t\t\tcell: () =>\tnew Text(\"R\", { color: \"blue\" }),\r\n\t\t\t\t// cell: () => new Rect({ fill: \"blue\", stroke: \"black\", strokeWidth: 0.1 }),\r\n\t\t\t\tpos: { column: 0, row: 1 },\r\n\t\t\t},\r\n\t\t\twriteRequested:\r\n\t\t\t{\r\n\t\t\t\tcell: () =>\tnew Text(\"w\", { color: \"green\" }),\r\n\t\t\t\t// cell: () => new Circle({ fill: \"green\", stroke: \"black\", strokeWidth: 0.1 }),\r\n\t\t\t\tpos: { column: 2, row: 0 },\r\n\t\t\t},\r\n\t\t\twillWrite:\r\n\t\t\t{\r\n\t\t\t\tcell: () =>\tnew Text(\"W\", { color: \"green\" }),\r\n\t\t\t\t// cell: () => new Rect({ fill: \"green\", stroke: \"black\", strokeWidth: 0.1 }),\r\n\t\t\t\tpos: { column: 2, row: 1 },\r\n\t\t\t},\r\n\t\t\tavailable:\r\n\t\t\t{\r\n\t\t\t\tcell: () =>\tnew Text(\"A\", { color: \"green\" }),\r\n\t\t\t\t// cell: () => new Rect({ fill: \"yellow\", stroke: \"black\", strokeWidth: 0.1 }),\r\n\t\t\t\tpos: { column: 1, row: 0 },\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst grid = new Grid({ columns: 20, rows: 5 });\r\n\r\n\t\tconst cellOptions = { ... cellSize, backgroundStyle: { fill: \"gray\", stroke: \"black\", strokeWidth: 0.1, opacity: 1 } };\r\n\r\n\t\tfor (let id = 0; id < 100; id++)\r\n\t\t{\r\n\t\t\tconst cell = new Grid(cellOptions);\r\n\r\n\t\t\tcell.setCell({ column: 1, row: 1 }, new Text(`${id}`, {}));\r\n\r\n\t\t\tif (this.read.has(id))\r\n\t\t\t\tcell.setCell(states.available.pos, states.available.cell());\r\n\r\n\t\t\tif (this.willWrite.has(id))\r\n\t\t\t\tcell.setCell(states.willWrite.pos, states.willWrite.cell());\r\n\t\t\tif (this.willRead.has(id))\r\n\t\t\t\tcell.setCell(states.willRead.pos, states.willRead.cell());\r\n\t\t\tif (this.readRequested.has(id))\r\n\t\t\t\tcell.setCell(states.readRequested.pos, states.readRequested.cell());\r\n\t\t\tif (this.writeRequested.has(id))\r\n\t\t\t\tcell.setCell(states.writeRequested.pos, states.writeRequested.cell());\r\n\r\n\t\t\tgrid.setCellByIndex(id, cell);\r\n\t\t}\r\n\r\n\t\treturn grid;\r\n\t}\r\n\r\n\tpublic visualize(scale: number)\r\n\t{\r\n\t\tconst grid = this.makeGrid();\r\n\t\tgrid.box = { x: () => - 0.5, y: () => - 0.5, w: () => 50, h: () => grid.rows * scale };\r\n\t\tgrid.draw(new RoomVisual());\r\n\t}\r\n}\r\n\r\nexport const segmentWrapper = new SegmentsBasicWrapper();\r\n","import { tracker } from \"./runtime.tracker\";\r\nimport { segmentWrapper } from \"./segments.basic.wrapper\";\r\nimport { Grid, Text } from \"./segments.visualizer\";\r\nimport { log } from \"./segments.logger\";\r\nimport { IMemoryRoot } from \"./memory.root\";\r\n\r\nexport interface ISegmentMetadata\r\n{\r\n\tcacheMiss: number;\r\n\r\n\tsavedVersion: number;\r\n\r\n\tlastWrite: number;\r\n\tlastRead: number;\r\n\tlastReadRequest: number;\r\n\tlastWriteRequest: number;\r\n\r\n\twriteCount: number;\r\n\treadCount: number;\r\n\treadRequestCount: number;\r\n\twriteRequestCount: number;\r\n\tsetCount: number;\r\n\tgetCount: number;\r\n}\r\n\r\nexport interface ISegmentsBufferEntry\r\n{\r\n\td: string;\r\n\tversion: number;\r\n\tlastWrite: number;\r\n}\r\n\r\nexport interface ISegmentBuffer\r\n{\r\n\tversion: number;\r\n\tinitTick: number;\r\n\tmetadata: { [id: string]: ISegmentMetadata };\r\n\tbuffer: { [id: string]: ISegmentsBufferEntry };\r\n\tclearCache: { [nodeId: string]: { [id: string]: 1 | undefined } | undefined };\r\n}\r\n\r\ndeclare global\r\n{\r\n\tinterface Memory\r\n\t{\r\n\t\tsegments: ISegmentBuffer;\r\n\t}\r\n}\r\n\r\nexport interface ISegmentsCacheEntry\r\n{\r\n\td: string;\r\n\tmetadata: ISegmentMetadata;\r\n\tversion: number;\r\n}\r\n\r\nexport interface ISegmentsCache\r\n{\r\n\tinitTick: number;\r\n\tc: { [id: string]: ISegmentsCacheEntry };\r\n}\r\n\r\nexport enum eSegmentBufferStatus\r\n{\r\n\tReady = 0,\r\n\tNextTick = 1,\r\n\tDelayed = 2,\r\n\tEmpty = 3,\r\n}\r\n\r\nconst root: IMemoryRoot<ISegmentBuffer> =\r\n{\r\n\tget memory(): ISegmentBuffer { return Memory.segments; },\r\n\tset memory(value: ISegmentBuffer) { Memory.segments = value; },\r\n\tpath: \"Memory.segments\",\r\n};\r\n\r\nexport class SegmentBuffer\r\n{\r\n\tprivate version = 2;\r\n\tprivate clearDelay = 3;\r\n\tprivate maxBufferSize = 500 * 1024;\r\n\tprivate cache: ISegmentsCache = { initTick: Game.time, c: {} };\r\n\r\n\tprivate get memory() { return root.memory; }\r\n\r\n\tpublic get maxSize() { return segmentWrapper.maxMemory; }\r\n\r\n\tprivate reinitMemory()\r\n\t{\r\n\t\troot.memory =\r\n\t\t{\r\n\t\t\tversion: this.version,\r\n\t\t\tmetadata: {},\r\n\t\t\tbuffer: {},\r\n\t\t\tclearCache: {},\r\n\t\t\tinitTick: Game.time,\r\n\t\t};\r\n\t}\r\n\r\n\tpublic reset()\r\n\t{\r\n\t\tthis.forgetAll();\r\n\t}\r\n\r\n\tpublic beforeTick()\r\n\t{\r\n\t\tsegmentWrapper.beforeTick();\r\n\r\n\t\tif (root.memory === undefined || root.memory.version !== this.version)\r\n\t\t\tthis.reinitMemory();\r\n\r\n\t\tif (root.memory.initTick !== this.cache.initTick)\r\n\t\t\tthis.cache = { initTick: root.memory.initTick, c: {} };\r\n\t\telse\r\n\t\t{\r\n\t\t\t// clearing marked entries\r\n\t\t\tconst clear = root.memory.clearCache[tracker.currentNodeId];\r\n\t\t\t_.forOwn(clear!, (_e, key) => delete this.cache.c[key!]);\r\n\t\t\troot.memory.clearCache[tracker.currentNodeId] = undefined;\r\n\r\n\t\t\t// clearing marks for inactive nodes\r\n\t\t\tif (Game.time % 10 === 0)\r\n\t\t\t{\r\n\t\t\t\t_.forOwn(root.memory.clearCache, (_e, key) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!_.has(tracker.activeNodes, key!))\r\n\t\t\t\t\t\tdelete root.memory.clearCache[key!];\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// clearing deleted cache or updating metadata reference\r\n\t\t\t_.forOwn(this.cache, (e, key) =>\r\n\t\t\t{\r\n\t\t\t\tconst id = Number(key);\r\n\t\t\t\tconst metadata = root.memory.metadata[id];\r\n\t\t\t\tif (metadata === undefined)\r\n\t\t\t\t\tdelete this.cache.c[id];\r\n\t\t\t\telse\r\n\t\t\t\t\te.metadata = metadata;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// if buffer is in cache, clear buffer, otherwise upload\r\n\t\t_.forOwn(root.memory.buffer, (buffer, key) =>\r\n\t\t{\r\n\t\t\tif (buffer === undefined)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tconst id = Number(key);\r\n\r\n\t\t\tconst metadata = root.memory.metadata[id];\r\n\t\t\tif (metadata === undefined)\r\n\t\t\t\treturn;\r\n\t\t\t// metadata can never be undefined, see afterTick()\r\n\r\n\t\t\tconst cache = this.cache.c[id];\r\n\t\t\tif (cache === undefined || cache.version < buffer.version)\r\n\t\t\t{\r\n\t\t\t\tthis.cache.c[id] =\r\n\t\t\t\t{\r\n\t\t\t\t\td: buffer.d,\r\n\t\t\t\t\tmetadata,\r\n\t\t\t\t\tversion: buffer.version,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// if buffer is already saved, but wasn't read for a while, clear\r\n\t\t\tif (metadata.savedVersion === buffer.version && (Game.time - buffer.lastWrite) > this.clearDelay)\r\n\t\t\t{\r\n\t\t\t\tdelete root.memory.buffer[id];\r\n\t\t\t}\r\n\t\t\t//else\r\n\t\t\t//\tlogger.error(`keeping buffer for ${id}, ${JSON.stringify(buffer)}, savedVersion: ${metadata.savedVersion}, ${this.clearDelay}, age: ${Game.time - buffer.lastWrite}`);\r\n\t\t});\r\n\t}\r\n\r\n\tpublic afterTick()\r\n\t{\r\n\t\t// if cache is newer than saved, try saving\r\n\t\t// if rejected, copy to buffer\r\n\t\t_.forOwn(this.cache.c, (cache, key) =>\r\n\t\t{\r\n\t\t\tif (cache.version <= cache.metadata.savedVersion)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tconst id = Number(key);\r\n\r\n\t\t\tlet writeFailed: boolean;\r\n\t\t\tif (segmentWrapper.saveSegment(id, cache.d))\r\n\t\t\t{\r\n\t\t\t\tcache.metadata.savedVersion = cache.version;\r\n\t\t\t\tcache.metadata.lastWrite = Game.time;\r\n\t\t\t\tcache.metadata.writeCount++;\r\n\t\t\t\twriteFailed = false;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tcache.metadata.lastWriteRequest = Game.time;\r\n\t\t\t\tcache.metadata.writeRequestCount++;\r\n\t\t\t\twriteFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (writeFailed)\r\n\t\t\t{\r\n\t\t\t\troot.memory.buffer[id] =\r\n\t\t\t\t{\r\n\t\t\t\t\td: cache.d,\r\n\t\t\t\t\tversion: cache.version,\r\n\t\t\t\t\tlastWrite: Game.time,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// trim saved buffer if over the limit\r\n\t\tlet bufferSize = _.sum(root.memory.buffer, (b) => b.d.length);\r\n\t\tif (bufferSize > this.maxBufferSize)\r\n\t\t{\r\n\t\t\t_.forOwn(root.memory.buffer, (buffer, key) =>\r\n\t\t\t{\r\n\t\t\t\tif (buffer === undefined)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tconst id = Number(key);\r\n\r\n\t\t\t\tconst metadata = root.memory.metadata[id];\r\n\t\t\t\tif (metadata === undefined)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tif (metadata.savedVersion === buffer.version)\r\n\t\t\t\t{\r\n\t\t\t\t\tbufferSize -= buffer.d.length;\r\n\t\t\t\t\tdelete root.memory.buffer[id];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bufferSize <= this.maxBufferSize)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn;\r\n\t\t\t});\r\n\r\n\t\t\tif (bufferSize > this.maxBufferSize)\r\n\t\t\t{\r\n\t\t\t\tlog.error(`segments.buffer: failed to trim memory buffer to ${this.maxBufferSize}, overhead: ${bufferSize - this.maxBufferSize}`);\r\n\r\n\t\t\t\t_.forOwn(root.memory.buffer, (buffer, key) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif (buffer === undefined)\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\tconst id = Number(key);\r\n\r\n\t\t\t\t\tlog.error(`segments.buffer: dropping data in segment ${id}, freeing ${buffer.d.length}`);\r\n\r\n\t\t\t\t\tbufferSize -= buffer.d.length;\r\n\t\t\t\t\tdelete root.memory.buffer[id];\r\n\t\t\t\t\tdelete root.memory.metadata[id];\r\n\t\t\t\t\tdelete this.cache.c[id];\r\n\r\n\t\t\t\t\tif (bufferSize <= this.maxBufferSize)\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsegmentWrapper.afterTick();\r\n\t}\r\n\r\n\tprivate getOrCreateMetadata(id: number)\r\n\t{\r\n\t\tlet metadata = root.memory.metadata[id];\r\n\t\tif (metadata === undefined)\r\n\t\t{\r\n\t\t\tmetadata =\r\n\t\t\t{\r\n\t\t\t\tcacheMiss: 0,\r\n\t\t\t\tsavedVersion: -1,\r\n\t\t\t\tlastWrite: -1,\r\n\t\t\t\tlastRead: -1,\r\n\t\t\t\tlastReadRequest: -1,\r\n\t\t\t\tlastWriteRequest: -1,\r\n\t\t\t\twriteCount: 0,\r\n\t\t\t\treadCount: 0,\r\n\t\t\t\treadRequestCount: 0,\r\n\t\t\t\twriteRequestCount: 0,\r\n\t\t\t\tsetCount: 0,\r\n\t\t\t\tgetCount: 0,\r\n\t\t\t};\r\n\t\t\troot.memory.metadata[id] = metadata;\r\n\t\t}\r\n\t\treturn metadata;\r\n\t}\r\n\r\n\tpublic getUsedSegments(): number[]\r\n\t{\r\n\t\treturn Object.keys(root.memory.metadata).map(Number);\r\n\t}\r\n\r\n\tpublic get(id: number): { status: eSegmentBufferStatus, data?: string }\r\n\t{\r\n\t\tconst metadata = root.memory.metadata[id];\r\n\t\tif (metadata === undefined)\r\n\t\t\treturn { status: eSegmentBufferStatus.Empty };\r\n\r\n\t\tmetadata.getCount++;\r\n\r\n\t\tconst cache = this.cache.c[id];\r\n\t\tif (cache !== undefined && cache.version >= metadata.savedVersion)\r\n\t\t\treturn { status: eSegmentBufferStatus.Ready, data: cache.d };\r\n\r\n\t\tmetadata.cacheMiss++;\r\n\r\n\t\t// if segment is ready, use it, save to cache\r\n\t\tconst data = segmentWrapper.getSegment(id);\r\n\t\tif (data !== undefined)\r\n\t\t{\r\n\t\t\tmetadata.readCount++;\r\n\t\t\tmetadata.lastRead = Game.time;\r\n\t\t\tconst entry =\r\n\t\t\t{\r\n\t\t\t\td: data,\r\n\t\t\t\tmetadata,\r\n\t\t\t\tversion: metadata.savedVersion,\r\n\t\t\t};\r\n\t\t\tthis.cache.c[id] = entry;\r\n\r\n\t\t\t// buffer is saved for updating other runtimes\r\n\t\t\troot.memory.buffer[id] =\r\n\t\t\t{\r\n\t\t\t\td: entry.d,\r\n\t\t\t\tversion: entry.version,\r\n\t\t\t\tlastWrite: Game.time,\r\n\t\t\t};\r\n\r\n\t\t\treturn { status: eSegmentBufferStatus.Ready, data };\r\n\t\t}\r\n\r\n\t\t// try requesting segment\r\n\t\tmetadata.readRequestCount++;\r\n\t\tmetadata.lastReadRequest = Game.time;\r\n\t\tif (segmentWrapper.requestSegment(id))\r\n\t\t\treturn { status: eSegmentBufferStatus.NextTick };\r\n\r\n\t\treturn { status: eSegmentBufferStatus.Delayed };\r\n\t}\r\n\r\n\tpublic set(id: number, data: string)\r\n\t{\r\n\t\tlog.info(`SegmentBuffer: setting ${id}`);\r\n\t\t// updating cached version if exists\r\n\t\tconst cache = this.cache.c[id];\r\n\t\tif (cache !== undefined)\r\n\t\t{\r\n\t\t\tcache.d = data;\r\n\t\t\tcache.version++;\r\n\t\t\tcache.metadata.setCount++;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// new cached version\r\n\t\tconst metadata = this.getOrCreateMetadata(id);\r\n\t\tthis.cache.c[id] =\r\n\t\t{\r\n\t\t\td: data,\r\n\t\t\tversion: metadata.savedVersion + 1,\r\n\t\t\tmetadata,\r\n\t\t};\r\n\t\tmetadata.setCount++;\r\n\t}\r\n\r\n\tpublic clear(id: number)\r\n\t{\r\n\t\t// this tick get will fail because of empty cache\r\n\t\t// next tick/other runtimes cache will be cleared/not restored because of empty metadata\r\n\t\tdelete this.cache.c[id];\r\n\t\tdelete root.memory.buffer[id];\r\n\t\tdelete root.memory.metadata[id];\r\n\r\n\t\tconst nodes = tracker.activeNodes;\r\n\t\t_.keys(nodes).forEach((nodeId) =>\r\n\t\t{\r\n\t\t\tif (nodeId === tracker.currentNodeId)\r\n\t\t\t\treturn;\r\n\t\t\tif (root.memory.clearCache[nodeId] === undefined)\r\n\t\t\t\troot.memory.clearCache[nodeId] = { [id]: 1 };\r\n\t\t\telse\r\n\t\t\t\troot.memory.clearCache[nodeId]![id] = 1;\r\n\t\t});\r\n\t}\r\n\r\n\tpublic visualize(scale: number)\r\n\t{\r\n\t\tconst states =\r\n\t\t{\r\n\t\t\tinCache:\r\n\t\t\t{\r\n\t\t\t\tcell: () => new Text(\"B\", { color: \"blue\" }),\r\n\t\t\t\tpos: { column: 2, row: 2 },\r\n\t\t\t},\r\n\t\t\tinBuffer:\r\n\t\t\t{\r\n\t\t\t\tcell: () => new Text(\"C\", { color: \"red\" }),\r\n\t\t\t\tpos: { column: 1, row: 2 },\r\n\t\t\t},\r\n\r\n\t\t\tsavedVersion:\r\n\t\t\t{\r\n\t\t\t\tcell: (text: string) => new Text(text, { color: \"green\" }),\r\n\t\t\t\tpos: { column: 0, row: 3 },\r\n\t\t\t},\r\n\t\t\tinBufferVersion:\r\n\t\t\t{\r\n\t\t\t\tcell: (text: string) => new Text(text, { color: \"red\" }),\r\n\t\t\t\tpos: { column: 1, row: 3 },\r\n\t\t\t},\r\n\t\t\tinCacheVersion:\r\n\t\t\t{\r\n\t\t\t\tcell: (text: string) => new Text(text, { color: \"blue\" }),\r\n\t\t\t\tpos: { column: 2, row: 3 },\r\n\t\t\t},\r\n\r\n\t\t\tcacheMiss:\r\n\t\t\t{\r\n\t\t\t\tcell: (text: string) => new Text(text, { color: \"red\" }),\r\n\t\t\t\tpos: { column: 2, row: 4 },\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tconst grid = segmentWrapper.makeGrid({ columns: 3, rows: 5 });\r\n\r\n\t\tfor (let id = 0; id < 100; id++)\r\n\t\t{\r\n\t\t\tconst cell = grid.getCellByIndex(id) as Grid;\r\n\r\n\t\t\tconst cache = this.cache.c[id];\r\n\t\t\tif (cache !== undefined)\r\n\t\t\t{\r\n\t\t\t\tcell.setCell(states.inCache.pos, states.inCache.cell());\r\n\t\t\t\tcell.setCell(states.inCacheVersion.pos, states.inCacheVersion.cell(`${cache.version}`));\r\n\t\t\t}\r\n\r\n\t\t\tconst buffer = root.memory.buffer[id];\r\n\t\t\tif (buffer !== undefined)\r\n\t\t\t{\r\n\t\t\t\tcell.setCell(states.inBuffer.pos, states.inBuffer.cell());\r\n\t\t\t\tcell.setCell(states.inBufferVersion.pos, states.inBufferVersion.cell(`${buffer.version}`));\r\n\t\t\t}\r\n\r\n\t\t\tconst md = root.memory.metadata[id];\r\n\t\t\tif (md !== undefined)\r\n\t\t\t{\r\n\t\t\t\tcell.setCell(states.savedVersion.pos, states.savedVersion.cell(`${md.savedVersion}`));\r\n\t\t\t\tcell.setCell(states.cacheMiss.pos, states.cacheMiss.cell(`${md.cacheMiss}`));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgrid.box = { x: () => - 0.5, y: () => - 0.5, w: () => 50, h: () => grid.rows * 2 * scale };\r\n\t\tgrid.draw(new RoomVisual());\r\n\t}\r\n\r\n\tpublic forgetAll()\r\n\t{\r\n\t\tthis.reinitMemory();\r\n\t\tthis.cache = { initTick: Game.time, c: {} };\r\n\t}\r\n}\r\n\r\nexport const segmentBuffer = new SegmentBuffer();\r\n","import { eSegmentBufferStatus, segmentBuffer } from \"./segments.buffer\";\r\nimport { log } from \"./segments.logger\";\r\nimport { IMemoryRoot } from \"./memory.root\";\r\nimport { tracker } from \"./runtime.tracker\";\r\n\r\nexport interface ISegmentStorageMetadata\r\n{\r\n\tids: number[];\r\n\tv: number;\r\n}\r\n\r\ninterface ISegmentStorageCache\r\n{\r\n\tinitTick: number;\r\n\tc: { [label: string]:\r\n\t{\r\n\t\tdata?: string;\r\n\t\tv: number;\r\n\t\tmetadata: ISegmentStorageMetadata;\r\n\t}};\r\n}\r\n\r\nexport interface ISegmentStorage\r\n{\r\n\tversion: number;\r\n\tinitTick: number;\r\n\tm: {[label: string]: ISegmentStorageMetadata; };\r\n\tclearCache: { [nodeId: string]: { [label: string]: 1 | undefined } | undefined };\r\n}\r\n\r\ndeclare global\r\n{\r\n\tinterface Memory\r\n\t{\r\n\t\tstorage: ISegmentStorage;\r\n\t}\r\n}\r\n\r\nconst root: IMemoryRoot<ISegmentStorage> =\r\n{\r\n\tget memory(): ISegmentStorage { return Memory.storage; },\r\n\tset memory(value: ISegmentStorage) { Memory.storage = value; },\r\n\tpath: \"Memory.storage\",\r\n};\r\n\r\nexport class SegmentStringStorage\r\n{\r\n\tprivate version = 0;\r\n\tprivate cache: ISegmentStorageCache = { initTick: Game.time, c: {} };\r\n\tprivate availableSegments: number[] = _.range(0, 100);\r\n\r\n\tprivate get memory() { return root.memory; }\r\n\r\n\tprivate reinitMemory()\r\n\t{\r\n\t\troot.memory =\r\n\t\t{\r\n\t\t\tversion: this.version,\r\n\t\t\tinitTick: Game.time,\r\n\t\t\tm: {},\r\n\t\t\tclearCache: {},\r\n\t\t};\r\n\t}\r\n\r\n\tpublic reset()\r\n\t{\r\n\t\tsegmentBuffer.reset();\r\n\t\tthis.reinitMemory();\r\n\t}\r\n\r\n\tpublic beforeTick()\r\n\t{\r\n\t\tsegmentBuffer.beforeTick();\r\n\r\n\t\tif (root.memory === undefined || root.memory.version !== this.version)\r\n\t\t\tthis.reinitMemory();\r\n\r\n\t\tif (root.memory.initTick !== this.cache.initTick)\r\n\t\t\tthis.cache = { initTick: root.memory.initTick, c: {} };\r\n\t\telse\r\n\t\t{\r\n\t\t\t// clearing marked entries\r\n\t\t\tconst clear = root.memory.clearCache[tracker.currentNodeId];\r\n\t\t\t_.forOwn(clear!, (_e, key) => delete this.cache.c[key!]);\r\n\t\t\troot.memory.clearCache[tracker.currentNodeId] = undefined;\r\n\r\n\t\t\t// clearing marks for inactive nodes\r\n\t\t\tif (Game.time % 10 === 0)\r\n\t\t\t{\r\n\t\t\t\t_.forOwn(root.memory.clearCache, (_e, key) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!_.has(tracker.activeNodes, key!))\r\n\t\t\t\t\t\tdelete root.memory.clearCache[key!];\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t_.forOwn(this.cache, (e, key) =>\r\n\t\t\t{\r\n\t\t\t\tconst id = Number(key);\r\n\r\n\t\t\t\tconst metadata = root.memory.m[id];\r\n\r\n\t\t\t\t// clear cache or restore metadata objects\r\n\t\t\t\tif (metadata === undefined)\r\n\t\t\t\t\tdelete this.cache.c[id];\r\n\t\t\t\telse\r\n\t\t\t\t\te.metadata = metadata;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tpublic afterTick()\r\n\t{\r\n\t\tconst freeSegments = _.difference(this.availableSegments, segmentBuffer.getUsedSegments());\r\n\t\tconst maxSize = segmentBuffer.maxSize;\r\n\r\n\t\t_.forOwn(this.cache.c, (cache, label) =>\r\n\t\t{\r\n\t\t\tif (cache.v <= cache.metadata.v)\r\n\t\t\t\treturn;\r\n\r\n\t\t\tif (cache.data === undefined)\r\n\t\t\t\treturn;\r\n\r\n\t\t\t// releasing segments\r\n\t\t\tcache.metadata.ids.forEach((id) => segmentBuffer.clear(id));\r\n\r\n\t\t\tif (cache.data.length <= maxSize)\r\n\t\t\t{\r\n\t\t\t\tconst id = freeSegments.pop();\r\n\t\t\t\tif (id === undefined)\r\n\t\t\t\t\tlog.error(`SegmentStringStorage: run out of segments, dropping data: '${label}'`);\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tsegmentBuffer.set(id, cache.data);\r\n\t\t\t\t\tcache.metadata.ids = [ id ];\r\n\t\t\t\t\tcache.metadata.v = cache.v;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst parts: string[] = [];\r\n\t\t\tlet start = 0;\r\n\t\t\twhile (start < cache.data.length)\r\n\t\t\t{\r\n\t\t\t\tconst remaining = cache.data.length - start;\r\n\t\t\t\tconst end = start + Math.min(remaining, maxSize);\r\n\r\n\t\t\t\tparts.push(cache.data.slice(start, end));\r\n\r\n\t\t\t\tstart = end;\r\n\t\t\t}\r\n\r\n\t\t\tif (freeSegments.length < parts.length)\r\n\t\t\t{\r\n\t\t\t\tlog.error(`SegmentStringStorage: run out of segments, dropping data: '${label}'`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tcache.metadata.ids = [];\r\n\t\t\tparts.map((part) =>\r\n\t\t\t{\r\n\t\t\t\tconst id = freeSegments.pop();\r\n\t\t\t\tif (id !== undefined)\r\n\t\t\t\t{\r\n\t\t\t\t\tsegmentBuffer.set(id, part);\r\n\t\t\t\t\tcache.metadata.ids.push(id);\r\n\t\t\t\t\tcache.metadata.v = cache.v;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tsegmentBuffer.afterTick();\r\n\r\n\t\treturn freeSegments;\r\n\t}\r\n\r\n\tpublic set(label: string, data: string)\r\n\t{\r\n\t\t// updating cached version if exists\r\n\t\tconst cache = this.cache.c[label];\r\n\t\tif (cache !== undefined)\r\n\t\t{\r\n\t\t\tlog.error(`new data for '${label}'`);\r\n\t\t\tcache.v++;\r\n\t\t\tcache.data = data;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet metadata = root.memory.m[label];\r\n\t\tif (metadata === undefined)\r\n\t\t{\r\n\t\t\tlog.error(`new '${label}'`);\r\n\t\t\tmetadata = { v: -1, ids: [] };\r\n\t\t\troot.memory.m[label] = metadata;\r\n\t\t}\r\n\r\n\t\tthis.cache.c[label] =\r\n\t\t{\r\n\t\t\tv: metadata.v + 1,\r\n\t\t\tdata,\r\n\t\t\tmetadata,\r\n\t\t};\r\n\t}\r\n\r\n\tpublic get(label: string): { status: eSegmentBufferStatus, data?: string, partial?: string }\r\n\t{\r\n\t\t// if no metadata, doesn't exist\r\n\t\tconst metadata = root.memory.m[label];\r\n\t\tif (metadata === undefined)\r\n\t\t\treturn { status: eSegmentBufferStatus.Empty };\r\n\r\n\t\tconst cache = this.cache.c[label];\r\n\t\tif (cache !== undefined && cache.v >= metadata.v)\r\n\t\t\treturn { status: eSegmentBufferStatus.Ready, data: cache.data };\r\n\r\n\t\tconst segments = metadata.ids.map(segmentBuffer.get, segmentBuffer);\r\n\r\n\t\tconst parts: string[] = [];\r\n\t\tlet status: eSegmentBufferStatus = eSegmentBufferStatus.Ready;\r\n\t\tfor (const entry of segments)\r\n\t\t{\r\n\t\t\tif (entry.status > status)\r\n\t\t\t\tstatus = entry.status;\r\n\r\n\t\t\tif (status === eSegmentBufferStatus.Ready && entry.data !== undefined)\r\n\t\t\t\tparts.push(entry.data);\r\n\t\t}\r\n\r\n\t\tif (status === eSegmentBufferStatus.Ready && parts.length === segments.length)\r\n\t\t{\r\n\t\t\tconst cache =\r\n\t\t\t{\r\n\t\t\t\tv: metadata.v,\r\n\t\t\t\tdata: parts.join(\"\"),\r\n\t\t\t\tmetadata,\r\n\t\t\t};\r\n\r\n\t\t\tthis.cache.c[label] = cache;\r\n\r\n\t\t\treturn { status: eSegmentBufferStatus.Ready, data: cache.data };\r\n\t\t}\r\n\r\n\t\tif (parts.length >= 0)\r\n\t\t\treturn { status, partial: parts.join(\"\") };\r\n\r\n\t\treturn { status };\r\n\t}\r\n\r\n\tpublic clear(label: string): void\r\n\t{\r\n\t\tdelete this.cache.c[label];\r\n\r\n\t\tconst metadata = root.memory.m[label];\r\n\t\tif (metadata === undefined)\r\n\t\t\treturn;\r\n\r\n\t\tmetadata.ids.forEach((id) => segmentBuffer.clear(id));\r\n\r\n\t\tconst nodes = tracker.activeNodes;\r\n\t\t_.keys(nodes).forEach((nodeId) =>\r\n\t\t{\r\n\t\t\tif (nodeId === tracker.currentNodeId)\r\n\t\t\t\treturn;\r\n\t\t\tif (root.memory.clearCache[nodeId] === undefined)\r\n\t\t\t\troot.memory.clearCache[nodeId] = { [label]: 1 };\r\n\t\t\telse\r\n\t\t\t\troot.memory.clearCache[nodeId]![label] = 1;\r\n\t\t});\r\n\r\n\t\tdelete root.memory.m[label];\r\n\t}\r\n\r\n\tpublic visualize(scale: number)\r\n\t{\r\n\t\tsegmentBuffer.visualize(scale);\r\n\t}\r\n}\r\n\r\nexport const segmentStorage = new SegmentStringStorage();\r\n"],"names":["root","log","eSegmentBufferStatus"],"mappings":"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"}